{"version":3,"sources":["../webpack:/project-action/src/bin/run-post-actions.js","../webpack:/project-action/webpack/bootstrap","../webpack:/project-action/webpack/runtime/compat","../webpack:/project-action/webpack/startup"],"names":["console","log","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","threw","__webpack_modules__","ab","__dirname"],"mappings":"qCAiBAA,QAAAC,IAAA,kBChBA,IAAAC,EAAA,GAGA,SAAAC,oBAAAC,GAEA,GAAAF,EAAAE,GAAA,CACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CAGAC,QAAA,IAIA,IAAAE,EAAA,KACA,IACAC,EAAAJ,GAAAE,EAAAA,EAAAD,QAAAF,qBACAI,EAAA,MACA,QACA,GAAAA,SAAAL,EAAAE,GAIA,OAAAE,EAAAD,QCzBAF,oBAAAM,GAAAC,UAAA,ICEA,OAAAP,oBAAA","file":"index.js","sourcesContent":["// @ts-check\n\n// const core = require('@actions/core');\n// const { runPostActions } = require('../index.js');\n\n// process.on('unhandledRejection', (up) => { throw up; });\n\n// const mountPath = core.getInput('mount-path', { required: true });\n// const projectMemberId = core.getInput('hexlet-id', { required: true });\n// const verbose = core.getInput('verbose', { required: true }) === 'true';\n\n// const options = {\n//   mountPath, projectMemberId, verbose,\n// };\n\n// runPostActions(options);\n\nconsole.log('post-actions');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\n__webpack_require__.ab = __dirname + \"/\";","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(703);\n"]}